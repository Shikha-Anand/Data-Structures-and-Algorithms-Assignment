ALGORITHM:

STEP 1: Fix each character of the string one by one.
STEP 2: Swap the current character with every other character including itself.
STEP 3: Recur for the remaining substring.
STEP 4:Backtrack by swapping back.

PROGRAM:
public class StringPermutations {
    public static void permute(String str, int l, int r) {
        if (l == r) {
            System.out.println(str);
        } else {
            for (int i = l; i <= r; i++) {
                str = swap(str, l, i); 
                permute(str, l + 1, r); 
                str = swap(str, l, i); 
            }
        }
    }


    public static String swap(String str, int i, int j) {
        char[] charArray = str.toCharArray();
        char temp = charArray[i];
        charArray[i] = charArray[j];
        charArray[j] = temp;
        return String.valueOf(charArray);
    }

    public static void main(String[] args) {
        String str = "ABC";
        int n = str.length();
        permute(str, 0, n - 1);
    }
}

OUTPUT:
ABC
ACB
BAC
BCA
CBA
CAB

COMPLEXITIES:
 Time Complexity: O(n Ã— n!)
 Space Complexity: O(n)



