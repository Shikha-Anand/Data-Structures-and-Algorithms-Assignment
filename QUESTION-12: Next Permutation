ALGORITHM:

Step 1: Find the first index i from the right where arr[i] < arr[i+1]
 -> From right: 2 < 3 → Found at index 1

Step 2: Find the first index j from the right where arr[j] > arr[i]
 -> From right: 3 > 2 → Found at index 2

Step 3: Swap arr[i] and arr[j]
 -> Swap 2 and 3 → Array becomes: [1, 3, 2]

Step 4: Reverse the part of the array after index i
 -> Reverse part after index 1 → [2] remains [2]
Final array: [1, 3, 2]

PROGRAM:
import java.util.Arrays;

public class NextPermutation {
    public static void nextPermutation(int[] arr) {
        int n = arr.length;
        int i = n - 2;

        while (i >= 0 && arr[i] >= arr[i + 1]) {
            i--;
        }

        if (i >= 0) {
            int j = n - 1;

            while (arr[j] <= arr[i]) {
                j--;
            }

            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }

        int start = i + 1;
        int end = n - 1;
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3};

        nextPermutation(arr);

        System.out.println("Next permutation is: " + Arrays.toString(arr));
    }
}

OUTPUT:
Next permutation is: [1, 3, 2]

Time Complexity: O(n) 
Space Complexity: O(1) 


