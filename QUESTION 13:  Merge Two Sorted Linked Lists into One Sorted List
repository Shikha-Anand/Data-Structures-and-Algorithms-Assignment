ALGORITHM:

STEP 1-Create a new linked list.
STEP 2-Compare elements of both lists one by one.
STEP 3-Insert the smaller one into the new list.

PROGRAM:
class Node {
    int data;
    Node next;
    Node(int d) { data = d; next = null; }
}

public class MergeLinkedList {
    public static Node merge(Node a, Node b) {
        Node dummy = new Node(0);
        Node tail = dummy;

        while (a != null && b != null) {
            if (a.data < b.data) {
                tail.next = a;
                a = a.next;
            } else {
                tail.next = b;
                b = b.next;
            }
            tail = tail.next;
        }

        if (a != null) tail.next = a;
        if (b != null) tail.next = b;

        return dummy.next;
    }

    public static void printList(Node head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
    }

    public static void main(String[] args) {
        Node a = new Node(1);
        a.next = new Node(3);
        a.next.next = new Node(5);

        Node b = new Node(2);
        b.next = new Node(4);
        b.next.next = new Node(6);

        Node result = merge(a, b);
        printList(result);
    }
}

OUTPUT:
1 2 3 4 5 6


Time Complexity: O(n + m)
Space Complexity: O(1)


