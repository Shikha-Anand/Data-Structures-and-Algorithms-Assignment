ALGORITHM:
STEP 1: Generate all permutations of the array using recursion.
STEP 2:Sort all permutations.
STEP 3: Find current permutation in the list.
STEP 4: Print the next one.

PROGRAM:
import java.util.*;

public class EasyNextPermutation {
    static ArrayList<String> all = new ArrayList<>();

    public static void generatePermutations(String str, String result) {
        if (str.length() == 0) {
            all.add(result);
            return;
        }

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            String left = str.substring(0, i);
            String right = str.substring(i + 1);
            generatePermutations(left + right, result + ch);
        }
    }

    public static void main(String[] args) {
        String input = "123";
        generatePermutations(input, "");
        Collections.sort(all);

        for (int i = 0; i < all.size(); i++) {
            if (all.get(i).equals(input)) {
                if (i == all.size() - 1) {
                    System.out.println("Next permutation: " + all.get(0));
                } else {
                    System.out.println("Next permutation: " + all.get(i + 1));
                }
                break;
            }
        }
    }
}

OUTPUT:
INPUT: 123
Next permutation: 132


 Time Complexity: O(n × n!)
 Space Complexity: O(n! × n) 


